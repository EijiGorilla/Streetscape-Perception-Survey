/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { GridProps, TextFieldProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type SurveyResultCreateFormInputValues = {
    comfort1?: string;
    comfort2?: string;
    comfort3?: string;
    comfort4?: string;
    comfort5?: string;
    comfort6?: string;
    comfort7?: string;
    comfort8?: string;
    comfort9?: string;
    comfort10?: string;
    comfort11?: string;
    comfort12?: string;
    temp?: string;
    intensity?: string;
    heatsources?: string;
    humidity?: string;
    velocity?: string;
    traffic?: string;
    greenery?: string;
    shading?: string;
    material?: string;
    imageability?: string;
    enclosure?: string;
    humanscale?: string;
    transparency?: string;
    complexity?: string;
    safe?: string;
    lively?: string;
    beautiful?: string;
    wealthy?: string;
    boring?: string;
    depressing?: string;
    eatingdrinking?: string[];
    nature?: string[];
    community?: string[];
    walking?: string[];
    sightseeing?: string[];
    perception?: string[];
    functionality?: string[];
    accessibility?: string[];
    contact?: string[];
};
export declare type SurveyResultCreateFormValidationValues = {
    comfort1?: ValidationFunction<string>;
    comfort2?: ValidationFunction<string>;
    comfort3?: ValidationFunction<string>;
    comfort4?: ValidationFunction<string>;
    comfort5?: ValidationFunction<string>;
    comfort6?: ValidationFunction<string>;
    comfort7?: ValidationFunction<string>;
    comfort8?: ValidationFunction<string>;
    comfort9?: ValidationFunction<string>;
    comfort10?: ValidationFunction<string>;
    comfort11?: ValidationFunction<string>;
    comfort12?: ValidationFunction<string>;
    temp?: ValidationFunction<string>;
    intensity?: ValidationFunction<string>;
    heatsources?: ValidationFunction<string>;
    humidity?: ValidationFunction<string>;
    velocity?: ValidationFunction<string>;
    traffic?: ValidationFunction<string>;
    greenery?: ValidationFunction<string>;
    shading?: ValidationFunction<string>;
    material?: ValidationFunction<string>;
    imageability?: ValidationFunction<string>;
    enclosure?: ValidationFunction<string>;
    humanscale?: ValidationFunction<string>;
    transparency?: ValidationFunction<string>;
    complexity?: ValidationFunction<string>;
    safe?: ValidationFunction<string>;
    lively?: ValidationFunction<string>;
    beautiful?: ValidationFunction<string>;
    wealthy?: ValidationFunction<string>;
    boring?: ValidationFunction<string>;
    depressing?: ValidationFunction<string>;
    eatingdrinking?: ValidationFunction<string>;
    nature?: ValidationFunction<string>;
    community?: ValidationFunction<string>;
    walking?: ValidationFunction<string>;
    sightseeing?: ValidationFunction<string>;
    perception?: ValidationFunction<string>;
    functionality?: ValidationFunction<string>;
    accessibility?: ValidationFunction<string>;
    contact?: ValidationFunction<string>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type SurveyResultCreateFormOverridesProps = {
    SurveyResultCreateFormGrid?: PrimitiveOverrideProps<GridProps>;
    comfort1?: PrimitiveOverrideProps<TextFieldProps>;
    comfort2?: PrimitiveOverrideProps<TextFieldProps>;
    comfort3?: PrimitiveOverrideProps<TextFieldProps>;
    comfort4?: PrimitiveOverrideProps<TextFieldProps>;
    comfort5?: PrimitiveOverrideProps<TextFieldProps>;
    comfort6?: PrimitiveOverrideProps<TextFieldProps>;
    comfort7?: PrimitiveOverrideProps<TextFieldProps>;
    comfort8?: PrimitiveOverrideProps<TextFieldProps>;
    comfort9?: PrimitiveOverrideProps<TextFieldProps>;
    comfort10?: PrimitiveOverrideProps<TextFieldProps>;
    comfort11?: PrimitiveOverrideProps<TextFieldProps>;
    comfort12?: PrimitiveOverrideProps<TextFieldProps>;
    temp?: PrimitiveOverrideProps<TextFieldProps>;
    intensity?: PrimitiveOverrideProps<TextFieldProps>;
    heatsources?: PrimitiveOverrideProps<TextFieldProps>;
    humidity?: PrimitiveOverrideProps<TextFieldProps>;
    velocity?: PrimitiveOverrideProps<TextFieldProps>;
    traffic?: PrimitiveOverrideProps<TextFieldProps>;
    greenery?: PrimitiveOverrideProps<TextFieldProps>;
    shading?: PrimitiveOverrideProps<TextFieldProps>;
    material?: PrimitiveOverrideProps<TextFieldProps>;
    imageability?: PrimitiveOverrideProps<TextFieldProps>;
    enclosure?: PrimitiveOverrideProps<TextFieldProps>;
    humanscale?: PrimitiveOverrideProps<TextFieldProps>;
    transparency?: PrimitiveOverrideProps<TextFieldProps>;
    complexity?: PrimitiveOverrideProps<TextFieldProps>;
    safe?: PrimitiveOverrideProps<TextFieldProps>;
    lively?: PrimitiveOverrideProps<TextFieldProps>;
    beautiful?: PrimitiveOverrideProps<TextFieldProps>;
    wealthy?: PrimitiveOverrideProps<TextFieldProps>;
    boring?: PrimitiveOverrideProps<TextFieldProps>;
    depressing?: PrimitiveOverrideProps<TextFieldProps>;
    eatingdrinking?: PrimitiveOverrideProps<TextFieldProps>;
    nature?: PrimitiveOverrideProps<TextFieldProps>;
    community?: PrimitiveOverrideProps<TextFieldProps>;
    walking?: PrimitiveOverrideProps<TextFieldProps>;
    sightseeing?: PrimitiveOverrideProps<TextFieldProps>;
    perception?: PrimitiveOverrideProps<TextFieldProps>;
    functionality?: PrimitiveOverrideProps<TextFieldProps>;
    accessibility?: PrimitiveOverrideProps<TextFieldProps>;
    contact?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type SurveyResultCreateFormProps = React.PropsWithChildren<{
    overrides?: SurveyResultCreateFormOverridesProps | undefined | null;
} & {
    clearOnSuccess?: boolean;
    onSubmit?: (fields: SurveyResultCreateFormInputValues) => SurveyResultCreateFormInputValues;
    onSuccess?: (fields: SurveyResultCreateFormInputValues) => void;
    onError?: (fields: SurveyResultCreateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: SurveyResultCreateFormInputValues) => SurveyResultCreateFormInputValues;
    onValidate?: SurveyResultCreateFormValidationValues;
} & React.CSSProperties>;
export default function SurveyResultCreateForm(props: SurveyResultCreateFormProps): React.ReactElement;
